{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nexport var get = function get(valor) {\n  var value;\n  return _regeneratorRuntime.async(function get$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(valor));\n\n        case 2:\n          _context.t0 = _context.sent;\n\n          if (_context.t0) {\n            _context.next = 5;\n            break;\n          }\n\n          _context.t0 = null;\n\n        case 5:\n          value = _context.t0;\n          return _context.abrupt(\"return\", value);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var set = function set(chave, valor) {\n  return _regeneratorRuntime.async(function set$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(chave, valor));\n\n        case 2:\n          return _context2.abrupt(\"return\");\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var remove = function remove(chave) {\n  return _regeneratorRuntime.async(function remove$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.removeItem(chave));\n\n        case 2:\n          return _context3.abrupt(\"return\");\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var reset = function reset() {\n  return _regeneratorRuntime.async(function reset$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.reset());\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var clear = function clear() {\n  return _regeneratorRuntime.async(function clear$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.clear());\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["D:/TCC/2020-1-selosocial/Mobile.Ui/src/services/cache.js"],"names":["get","valor","AsyncStorage","getItem","value","set","chave","setItem","remove","removeItem","reset","clear"],"mappings":";;AAEA,OAAO,IAAMA,GAAG,GAAG,SAANA,GAAM,CAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACGC,YAAY,CAACC,OAAb,CAAqBF,KAArB,CADH;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA,wBACkC,IADlC;;AAAA;AACXG,UAAAA,KADW;AAAA,2CAERA,KAFQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAZ;AAKP,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,CAAOC,KAAP,EAAcL,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACTC,YAAY,CAACK,OAAb,CAAqBD,KAArB,EAA4BL,KAA5B,CADS;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAZ;AAKP,OAAO,IAAMO,MAAM,GAAG,SAATA,MAAS,CAAOF,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACZJ,YAAY,CAACO,UAAb,CAAwBH,KAAxB,CADY;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf;AAKP,OAAO,IAAMI,KAAK,GAAG,SAARA,KAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACXR,YAAY,CAACQ,KAAb,EADW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd;AAIP,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACXT,YAAY,CAACS,KAAb,EADW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd","sourcesContent":["import { AsyncStorage, } from 'react-native';\r\n\r\nexport const get = async valor => {\r\n    let value = await AsyncStorage.getItem(valor) || null;\r\n    return value;\r\n}\r\n\r\nexport const set = async (chave, valor) => {\r\n    await AsyncStorage.setItem(chave, valor);\r\n    return;\r\n}\r\n\r\nexport const remove = async (chave) => {\r\n    await AsyncStorage.removeItem(chave);\r\n    return;\r\n}\r\n\r\nexport const reset = async () => {\r\n    await AsyncStorage.reset();\r\n}\r\n\r\nexport const clear = async () => {\r\n    await AsyncStorage.clear();\r\n}"]},"metadata":{},"sourceType":"module"}