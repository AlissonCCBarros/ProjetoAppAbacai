{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport * as Cache from \"../services/cache\";\nimport { Api } from \"../services/api\";\nexport var signOutAsync = function signOutAsync() {\n  return _regeneratorRuntime.async(function signOutAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          Cache.remove(\"ACCESS_TOKEN\");\n          Cache.remove(\"EH_INSTITUICAO\");\n          Cache.remove(\"USER_ID\");\n          Cache.clear();\n          return _context.abrupt(\"return\", \"\");\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var signInAsync = function signInAsync(email, pass) {\n  var _await$Api$post, data;\n\n  return _regeneratorRuntime.async(function signInAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(new Api(\"User\").post({\n            email: email,\n            password: pass\n          }));\n\n        case 3:\n          _await$Api$post = _context2.sent;\n          data = _await$Api$post.data;\n\n          if (!(data == null || data.token == null)) {\n            _context2.next = 8;\n            break;\n          }\n\n          Alert.alert('Opss!', 'Usuário ou senha inválidos, caso não tenha criado uma conta clique em Criar Conta.');\n          return _context2.abrupt(\"return\");\n\n        case 8:\n          console.log(data.ehInstituicao);\n          Cache.set(\"EH_INSTITUICAO\", data.ehInstituicao);\n          Cache.set(\"ACCESS_TOKEN\", data.token);\n          Cache.set(\"USER_ID\", data.accountId);\n          return _context2.abrupt(\"return\", data.token);\n\n        case 15:\n          _context2.prev = 15;\n          _context2.t0 = _context2[\"catch\"](0);\n          Alert.alert('Opss!', 'Não conseguimos nos conectar com o servidor, teste novamente em instantes.');\n          return _context2.abrupt(\"return\");\n\n        case 19:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 15]], Promise);\n};\nexport function isLogado() {\n  var access_token;\n  return _regeneratorRuntime.async(function isLogado$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(Cache.get(\"ACCESS_TOKEN\"));\n\n        case 2:\n          access_token = _context3.sent;\n\n          if (access_token) {\n            _context3.next = 5;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", false);\n\n        case 5:\n          return _context3.abrupt(\"return\", true);\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function GetUserId() {\n  var user_id;\n  return _regeneratorRuntime.async(function GetUserId$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(Cache.get(\"USER_ID\"));\n\n        case 2:\n          user_id = _context4.sent;\n\n          if (user_id) {\n            _context4.next = 5;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", null);\n\n        case 5:\n          return _context4.abrupt(\"return\", user_id);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction cacheAuthAsync(authState) {\n  return AsyncStorage.setItem(StorageKey, JSON.stringify(authState));\n}\n\nfunction checkIfTokenExpired(_ref) {\n  var accessTokenExpirationDate = _ref.accessTokenExpirationDate;\n  return new Date(accessTokenExpirationDate) < new Date();\n}","map":{"version":3,"sources":["D:/TCC/2020-1-selosocial/Mobile.Ui/src/services/auth.js"],"names":["Cache","Api","signOutAsync","remove","clear","signInAsync","email","pass","post","password","data","token","Alert","alert","console","log","ehInstituicao","set","accountId","isLogado","get","access_token","GetUserId","user_id","cacheAuthAsync","authState","AsyncStorage","setItem","StorageKey","JSON","stringify","checkIfTokenExpired","accessTokenExpirationDate","Date"],"mappings":";;;AACA,OAAO,KAAKA,KAAZ;AACA,SAASC,GAAT;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AACxBF,UAAAA,KAAK,CAACG,MAAN,CAAa,cAAb;AACAH,UAAAA,KAAK,CAACG,MAAN,CAAa,gBAAb;AACAH,UAAAA,KAAK,CAACG,MAAN,CAAa,SAAb;AACAH,UAAAA,KAAK,CAACI,KAAN;AAJwB,2CAKjB,EALiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;AAQP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAOC,KAAP,EAAcC,IAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEI,IAAIN,GAAJ,CAAQ,MAAR,EAAgBO,IAAhB,CAAqB;AACxCF,YAAAA,KAAK,EAAEA,KADiC;AAExCG,YAAAA,QAAQ,EAAEF;AAF8B,WAArB,CAFJ;;AAAA;AAAA;AAEXG,UAAAA,IAFW,mBAEXA,IAFW;;AAAA,gBAOfA,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACC,KAAL,IAAc,IAPf;AAAA;AAAA;AAAA;;AAQfC,UAAAA,KAAK,CAACC,KAAN,CAAY,OAAZ,EACI,oFADJ;AARe;;AAAA;AAanBC,UAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACM,aAAjB;AACAhB,UAAAA,KAAK,CAACiB,GAAN,CAAU,gBAAV,EAA4BP,IAAI,CAACM,aAAjC;AACAhB,UAAAA,KAAK,CAACiB,GAAN,CAAU,cAAV,EAA0BP,IAAI,CAACC,KAA/B;AACAX,UAAAA,KAAK,CAACiB,GAAN,CAAU,SAAV,EAAqBP,IAAI,CAACQ,SAA1B;AAhBmB,4CAkBZR,IAAI,CAACC,KAlBO;;AAAA;AAAA;AAAA;AAqBnBC,UAAAA,KAAK,CAACC,KAAN,CAAY,OAAZ,EACI,4EADJ;AArBmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;AA2BP,OAAO,SAAeM,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEsBnB,KAAK,CAACoB,GAAN,CAAU,cAAV,CAFtB;;AAAA;AAECC,UAAAA,YAFD;;AAAA,cAGEA,YAHF;AAAA;AAAA;AAAA;;AAAA,4CAGuB,KAHvB;;AAAA;AAAA,4CAKI,IALJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP,OAAO,SAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEiBtB,KAAK,CAACoB,GAAN,CAAU,SAAV,CAFjB;;AAAA;AAECG,UAAAA,OAFD;;AAAA,cAGEA,OAHF;AAAA;AAAA;AAAA;;AAAA,4CAGkB,IAHlB;;AAAA;AAAA,4CAKIA,OALJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOP,SAASC,cAAT,CAAwBC,SAAxB,EAAmC;AAC/B,SAAOC,YAAY,CAACC,OAAb,CAAqBC,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeL,SAAf,CAAjC,CAAP;AACH;;AAED,SAASM,mBAAT,OAA4D;AAAA,MAA7BC,yBAA6B,QAA7BA,yBAA6B;AACxD,SAAO,IAAIC,IAAJ,CAASD,yBAAT,IAAsC,IAAIC,IAAJ,EAA7C;AACH","sourcesContent":["import { AsyncStorage, Alert } from 'react-native'\r\nimport * as Cache from '../services/cache';\r\nimport { Api } from '../services/api';\r\n\r\nexport const signOutAsync = async () => {\r\n    Cache.remove(\"ACCESS_TOKEN\");\r\n    Cache.remove(\"EH_INSTITUICAO\");\r\n    Cache.remove(\"USER_ID\");\r\n    Cache.clear();\r\n    return \"\"\r\n}\r\n\r\nexport const signInAsync = async (email, pass) => {\r\n    try {\r\n        const { data } = await new Api(\"User\").post({\r\n            email: email,\r\n            password: pass\r\n        });\r\n        \r\n        if (data == null || data.token == null) {\r\n            Alert.alert('Opss!',\r\n                'Usuário ou senha inválidos, caso não tenha criado uma conta clique em Criar Conta.')\r\n\r\n            return;\r\n        }\r\n        console.log(data.ehInstituicao)\r\n        Cache.set(\"EH_INSTITUICAO\", data.ehInstituicao);\r\n        Cache.set(\"ACCESS_TOKEN\", data.token);\r\n        Cache.set(\"USER_ID\", data.accountId);\r\n\r\n        return data.token;\r\n    }\r\n    catch (error) {\r\n        Alert.alert('Opss!',\r\n            'Não conseguimos nos conectar com o servidor, teste novamente em instantes.');\r\n            \r\n            return;\r\n    }\r\n}\r\nexport async function isLogado() {\r\n    \r\n    let access_token = await Cache.get(\"ACCESS_TOKEN\");\r\n    if (!access_token) return false;\r\n\r\n    return true;\r\n}\r\nexport async function GetUserId() {\r\n    \r\n    let user_id = await Cache.get(\"USER_ID\");\r\n    if (!user_id) return null;\r\n\r\n    return user_id;\r\n}\r\nfunction cacheAuthAsync(authState) {\r\n    return AsyncStorage.setItem(StorageKey, JSON.stringify(authState));\r\n}\r\n\r\nfunction checkIfTokenExpired({ accessTokenExpirationDate }) {\r\n    return new Date(accessTokenExpirationDate) < new Date();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}