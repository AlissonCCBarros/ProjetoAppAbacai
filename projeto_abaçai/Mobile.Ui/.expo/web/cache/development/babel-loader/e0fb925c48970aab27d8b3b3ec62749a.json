{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as AppAuth from 'expo-app-auth';\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport axios from \"axios\";\nimport * as Cache from \"../services/cache\";\nimport { Api } from \"../services/api\";\nexport var signOutAsync = function signOutAsync() {\n  return _regeneratorRuntime.async(function signOutAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          Cache.remove(\"ACCESS_TOKEN\");\n          return _context.abrupt(\"return\", \"\");\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var signInAsync = function signInAsync(email, pass) {\n  var _await$axios$post$the, data;\n\n  return _regeneratorRuntime.async(function signInAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(axios.post(\"http://localhost:7002/api/user\", {\n            \"email\": \"teste@t\",\n            \"password\": \"aaaa\"\n          }).then(function (res) {}).catch(function (err) {}));\n\n        case 3:\n          _await$axios$post$the = _context2.sent;\n          data = _await$axios$post$the.data;\n          return _context2.abrupt(\"return\", data.access_token);\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};\nexport function isLogado() {\n  var access_token, res;\n  return _regeneratorRuntime.async(function isLogado$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(Cache.set(\"ACCESS_TOKEN\"));\n\n        case 2:\n          access_token = _context3.sent;\n\n          if (access_token) {\n            _context3.next = 5;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", false);\n\n        case 5:\n          _context3.next = 7;\n          return _regeneratorRuntime.awrap(new Api(\"currentuser\").get());\n\n        case 7:\n          res = _context3.sent;\n\n          if (res.data) {\n            _context3.next = 10;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", false);\n\n        case 10:\n          return _context3.abrupt(\"return\", true);\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction cacheAuthAsync(authState) {\n  return AsyncStorage.setItem(StorageKey, JSON.stringify(authState));\n}\n\nfunction checkIfTokenExpired(_ref) {\n  var accessTokenExpirationDate = _ref.accessTokenExpirationDate;\n  return new Date(accessTokenExpirationDate) < new Date();\n}","map":{"version":3,"sources":["D:/TCC/2020-1-selosocial/src/services/auth.js"],"names":["AppAuth","axios","Cache","Api","signOutAsync","remove","signInAsync","email","pass","post","then","res","catch","err","data","access_token","console","log","isLogado","set","get","cacheAuthAsync","authState","AsyncStorage","setItem","StorageKey","JSON","stringify","checkIfTokenExpired","accessTokenExpirationDate","Date"],"mappings":";AAAA,OAAO,KAAKA,OAAZ,MAAyB,eAAzB;;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ;AACA,SAASC,GAAT;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AACxBF,UAAAA,KAAK,CAACG,MAAN,CAAa,cAAb;AADwB,2CAEjB,EAFiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;AAKP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAOC,KAAP,EAAcC,IAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEIP,KAAK,CACvBQ,IADkB,CACb,gCADa,EACqB;AACpC,qBAAS,SAD2B;AAEpC,wBAAY;AAFwB,WADrB,EAKlBC,IALkB,CAKb,UAAAC,GAAG,EAAI,CACZ,CANkB,EAOlBC,KAPkB,CAOZ,UAAAC,GAAG,EAAI,CACb,CARkB,CAFJ;;AAAA;AAAA;AAEXC,UAAAA,IAFW,yBAEXA,IAFW;AAAA,4CAYZA,IAAI,CAACC,YAZO;;AAAA;AAAA;AAAA;AAenBC,UAAAA,OAAO,CAACC,GAAR;;AAfmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;AAmBP,OAAO,SAAeC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACsBhB,KAAK,CAACiB,GAAN,CAAU,cAAV,CADtB;;AAAA;AACCJ,UAAAA,YADD;;AAAA,cAEEA,YAFF;AAAA;AAAA;AAAA;;AAAA,4CAEuB,KAFvB;;AAAA;AAAA;AAAA,2CAIa,IAAIZ,GAAJ,CAAQ,aAAR,EAAuBiB,GAAvB,EAJb;;AAAA;AAICT,UAAAA,GAJD;;AAAA,cAKEA,GAAG,CAACG,IALN;AAAA;AAAA;AAAA;;AAAA,4CAKmB,KALnB;;AAAA;AAAA,4CAOI,IAPJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUP,SAASO,cAAT,CAAwBC,SAAxB,EAAmC;AAC/B,SAAOC,YAAY,CAACC,OAAb,CAAqBC,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeL,SAAf,CAAjC,CAAP;AACH;;AAED,SAASM,mBAAT,OAA4D;AAAA,MAA7BC,yBAA6B,QAA7BA,yBAA6B;AACxD,SAAO,IAAIC,IAAJ,CAASD,yBAAT,IAAsC,IAAIC,IAAJ,EAA7C;AACH","sourcesContent":["import * as AppAuth from 'expo-app-auth'\r\nimport { AsyncStorage, Alert } from 'react-native'\r\nimport axios from \"axios\";\r\nimport * as Cache from '../services/cache';\r\nimport { Api } from '../services/api';\r\n\r\nexport const signOutAsync = async () => {\r\n    Cache.remove(\"ACCESS_TOKEN\");\r\n    return \"\"\r\n}\r\n\r\nexport const signInAsync = async (email, pass) => {\r\n    try {\r\n        const { data } = await axios\r\n            .post(\"http://localhost:7002/api/user\", {\r\n                \"email\": \"teste@t\",\r\n                \"password\": \"aaaa\"\r\n            })\r\n            .then(res => {\r\n            })\r\n            .catch(err => {\r\n            });\r\n\r\n        return data.access_token;\r\n    }\r\n    catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport async function isLogado() {\r\n    let access_token = await Cache.set(\"ACCESS_TOKEN\");\r\n    if (!access_token) return false;\r\n\r\n    let res = await new Api(\"currentuser\").get();\r\n    if (!res.data) return false;\r\n\r\n    return true;\r\n}\r\n\r\nfunction cacheAuthAsync(authState) {\r\n    return AsyncStorage.setItem(StorageKey, JSON.stringify(authState));\r\n}\r\n\r\nfunction checkIfTokenExpired({ accessTokenExpirationDate }) {\r\n    return new Date(accessTokenExpirationDate) < new Date();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}